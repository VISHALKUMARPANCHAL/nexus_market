<div class="col-lg-3">
    <div class="filter-sidebar p-4 bg-white rounded-3 shadow-sm border">
        <h5 class="mb-4 text-primary fw-bold">Filters</h5>
        <label><b>
                Categories
            </b></label>
        <?php foreach ($this->getcategories() as $category): ?>
        <div class="filter-option">
            <label>
                <input type="checkbox" name="id" value="<?php echo htmlspecialchars($category->getCategoryId()); ?>"
                    class="filter-checkbox">
                <?php echo htmlspecialchars($category->getName()); ?>
            </label>
        </div>
        <?php endforeach; ?>
        <?php foreach ($this->getAttribute() as $attribute): ?>
        <div class="filter-option">
            <label><b><?php echo ($attribute->getName()) ?></b></label>
            <br>
            <?php $attrs = $this->getValues($attribute->getAttributeId());
                foreach ($attrs as $attr): ?>
            <label>
                <input type="checkbox" name="<?php echo htmlspecialchars($attribute->getName()); ?>"
                    value="<?php echo htmlspecialchars($attr); ?>" class="filter-checkbox">
                <?php echo htmlspecialchars(ucfirst($attr)); ?>
            </label>
            <br>
            <?php endforeach; ?>
        </div>
        <?php endforeach; ?>
        <div class="d-grid gap-2">
            <!-- <button class="btn btn-primary" onclick="filterProducts()">Apply Filters</button> -->
            <button class="btn btn-outline-secondary" onclick="clearFilters()">Clear All Filters</button>
        </div>
    </div>
</div>
<script>
const FilterApp = {
    init: function() {
        this.bindEvents();
    },

    bindEvents: function() {
        $('.filter-checkbox').on('input', this.fetchFilteredProducts);
    },

    fetchFilteredProducts: function() {
        let formData = FilterApp.collectFilterData();
        // console.log("Collected Filters:", formData);
        // Encode and update URL
        FilterApp.updateEncodedURL(formData);

        $('#products-container').html('<p>Loading products...</p>');

        $.ajax({
            url: 'http://localhost/ecommerceweb/catalog/product/list/',
            type: 'GET',
            data: formData,
            success: function(response) {
                console.log(response);

                let $response = $(response);
                let $productsGrid = $response.find('#products-container');
                console.log($productsGrid);

                $('#products-container').html($productsGrid);
            },
            error: function(error) {
                console.log('Error fetching products:', error);
                $('#products-container').html('<p>Failed to load products. Please try again.</p>');
            }
        });
    },

    collectFilterData: function() {
        let filters = {};

        $('.filter-checkbox:checked').each(function() {
            let name = $(this).attr('name');
            if (!filters[name]) {
                filters[name] = [];
            }
            filters[name].push($(this).val());
        });
        console.log(filters);
        return filters;
    },

    syncPriceInputs: function() {
        $('#max-price').val($('#price-slider').val());
        FilterApp.fetchFilteredProducts();
    },

    debounce: function(func, delay) {
        let timer;
        return function() {
            clearTimeout(timer);
            timer = setTimeout(() => func.apply(this, arguments), delay);
        };
    },

    updateEncodedURL: function(filters) {
        try {
            // Convert object to JSON and encode with Base64
            let jsonString = JSON.stringify(filters);
            // console.log(jsonString);
            let encodedData = btoa(jsonString); // Base64 encode

            // Update the URL with encoded data
            window.history.pushState({}, '', `?data=${encodedData}`);
        } catch (error) {
            console.error('Encoding failed:', error);
        }
    },

    fetchProductsFromEncodedURL: function() {
        let urlParams = new URLSearchParams(window.location.search);
        let encodedData = urlParams.get('data');
        console.log(encodedData);

        if (encodedData) {
            try {
                // Decode Base64 back to JSON
                let decodedData = atob(encodedData);
                let filters = JSON.parse(decodedData);
                // console.log(filters);
                if (filters) {
                    FilterApp.restoreFilters(filters);
                    this.fetchFilteredProducts();
                }
            } catch (error) {
                console.error('Decoding failed:', error);
            }
        }
    },

    restoreFilters: function(filters) {
        $.each(filters, function(key, value) {
            if (Array.isArray(value)) {
                $('.filter-checkbox[name="' + key + '"]').each(function() {
                    $(this).prop('checked', value.includes($(this).val()));
                });
            } else {
                $('#' + key).val(value);
            }
        });
    }
}

$(document).ready(function() {
    FilterApp.init();
    FilterApp.fetchProductsFromEncodedURL();
});

function toggleAttribute(header) {
    console.log(header);
    var options = header.nextElementSibling;
    if (options.classList.contains('active')) {
        options.classList.remove('active');
    } else {
        options.classList.add('active');
    }
}

document.querySelectorAll('.attribute-header').forEach(function(header) {
    header.addEventListener('click', function() {
        toggleAttribute(this);
    });
});
</script>